#!/bin/bash

#ROOTDIR=`pwd`

#sudo apt-get update
#sudo apt-get upgrade
#sudo apt-get install -y minicom screen autoconf libusb-1.0-0-dev libtool libftdi-dev texinfo

install_node()
{
	echo "INSTALL NODE"
	cd bin
	./install_node.sh
	cd ..
}

update_esp_cli()
{
	echo "UPDATE ESP_CLI"
	cd src
	./update_esp_cli.sh
	cd ..
}

update_elua()
{
	echo "UPDATE ELUA"
	cd src
	./update_elua.sh
	cd ..
}

update_cmsis_stdperiph()
{
	echo "UPDATE CMSIS STDPERIPH"
	cd src
	./update_cmsis_stdperiph.sh
	cd ..
}

update_dfu-util()
{
	echo "UPDATE DFU-UTIL"
	cd src
	./update_dfu-util.sh
	cd ..
}

update_espruino()
{
	echo "UPDATE ESPRUINO"
	cd src
	./update_espruino.sh
	cd ..
}

update_libmaple()
{
	echo "UPDATE LIBMAPLE"
	cd src
	./update_libmaple.sh
	cd ..
}

update_libopencm3()
{
	echo "UPDATE LIBOPENCM3"
	cd src
	./update_libopencm3.sh
	cd ..
}

update_openocd()
{
	echo "UPDATE OPENOCD"
	cd src
	./update_openocd.sh
	cd ..
}

update_stlink()
{
	echo "UPDATE STLINK"
	cd src
	./update_stlink.sh
	cd ..
}

rpi_serial_console_disable()
{
	echo "DISABLE SERIAL"
	cd scripts
	sudo ./release_serial.sh disable
	cd ..
}

rpi_serial_console_enable()
{
	echo "ENABLE SERIAL"
	cd scripts
	sudo ./release_serial.sh enable
	cd ..
}

path_env()
{
	echo "SET PATH ENV"
	cd scripts
	./path_env.sh
	cd ..
}

upload_espruino()
{
	echo "UPLOADING ESPRUINO.BIN"
	cd bin
	./install_espruino_bin.sh
	echo "espruino communicates on 9600 baud on /dev/ttyAMA0"
	cd ..
}

upload_elua()
{
	echo "UPLOADING ELUA.BIN"
	cd bin
	./install_elua_bin.sh
	echo "eLua communicates on 115200 baud on /dev/ttyAMA0"
	cd ..
}

update_toolchain()
{
#	update_self

	echo "UPDATE TOOLCHAIN"
	if [ -d /opt/arminarm ]; then
		echo "Directory exists: updating"
	fi

	cd bin
	./install_toolchain.sh
	cd ..

	if [ -d /opt/arminarm/tools ]; then
		echo "Directory exists: updating"
	else
		echo "Tools not found: installing"
	fi

	cd src
	sudo cp -r tools /opt/arminarm/
	cd ..
}

update_self()
{
	echo "UPDATE SELF"
	git pull
}


show_options()
{
	echo ""
	echo "#######################################################################"
	echo "#                              ARMinARM                               #"
	echo "#######################################################################"
	echo ""
	echo "Essentials:"
	echo "	0) Update Self"
	echo "	1) Update/Install ARMinARM GCC Toolchain"
	echo "	2) Add /opt/arminarm* to PATH env"
	echo "	3) Disable serial port (required for ARMinARM board, needs reboot)"
	echo "	4) Enable serial port (for booting RPI over serial port, default)"
	echo "	5) Update/Install node.js"
	echo ""
	echo "Fast start:"
	echo "	10) Upload espruino.bin to ARMinARM board"
	echo "	11) Upload elua.bin to ARMinARM board"
	echo ""
	echo "Source code:"
	echo "	a) Update/Install CMSIS_StdPeriph Examples"
	echo "	b) Update/Install Espruino source code"
	echo "	c) Update/Install esp-cli"
	echo "	d) Update/Install eLua source code"
	echo "	e) Update/Install libmaple"
	echo "	f) Update/Install libopencm3"
	echo "	g) Update/Install OpenOCD"
	echo "	h) Update/Install ST-Link"
	echo "	i) Update/Install dfu-util"
	echo ""
	echo "	q) Quit"
	echo ""
}


OPTION="0"

while [ "$OPTION" != "q" ]; do

	show_options

	echo "Enter your choice:"
	read OPTION

	if [ "$OPTION" == "0" ]; then
		update_self
		OPTION="q"
		echo "Updated. Please run setup again."
	elif [ "$OPTION" == "1" ]; then
		update_toolchain
	elif [ "$OPTION" == "2" ]; then
		path_env
	elif [ "$OPTION" == "3" ]; then
		rpi_serial_console_disable
	elif [ "$OPTION" == "4" ]; then
		rpi_serial_console_enable
	elif [ "$OPTION" == "5" ]; then
		install_node


	elif [ "$OPTION" == "10" ]; then
		upload_espruino
	elif [ "$OPTION" == "11" ]; then
		upload_elua


	elif [ "$OPTION" == "a" ]; then
		update_cmsis_stdperiph
	elif [ "$OPTION" == "b" ]; then
		update_espruino
	elif [ "$OPTION" == "c" ]; then
		update_esp_cli
	elif [ "$OPTION" == "d" ]; then
		update_elua
	elif [ "$OPTION" == "e" ]; then
		update_libmaple
	elif [ "$OPTION" == "f" ]; then
		update_libopencm3
	elif [ "$OPTION" == "g" ]; then
		update_openocd
	elif [ "$OPTION" == "h" ]; then
		update_stlink
	elif [ "$OPTION" == "i" ]; then
		update_dfu-util

	elif [ "$OPTION" == "q" ]; then
		echo "Bye!"
	else
		echo "'$OPTION' is an unkown option."
	fi

done
